{"ast":null,"code":"// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\nconst Mqtt = {\n  init: function () {\n    var client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + Mqtt.makeid(3));\n    client.connect({\n      onSuccess: Mqtt.onConnect\n    }); // set callback handlers\n\n    client.onConnectionLost = Mqtt.onConnectionLost;\n    client.onMessageArrived = Mqtt.onMessageArrived;\n    return client;\n  },\n  pushNewChallenge: function (client) {\n    console.log(\"Pushing New Challenge\");\n    var x = Mqtt.getByValue(\"challenge-name\");\n    var newOrder = {\n      type: \"push new challenge\",\n      challenge_id: \"C\" + Mqtt.makeid(6),\n      challenge_name: Mqtt.state.value,\n      description: \"runrun\",\n      end_time: \"20-02-28 14:20\",\n      step_goal: \"2000\",\n      reward: \"200\",\n      current_time: \"2020-02-30T08:35:30.0108Z\"\n    }; //x.elements[3].value,\n    // delivery_address: x.elements[4].value,\n    // delivery_coordinates: x.elements[5].value\n    // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n    // document.getElementById(\"status\").innerHTML = newOrder.order_status;\n\n    Mqtt.onSubmit(JSON.stringify(newOrder), client);\n  },\n  getByValue: function (variable) {\n    var x = document.getElementById(variable);\n    return x;\n  },\n  // called when the client connects\n  onSubmit: function (payload, client) {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onSubmit\");\n    client.subscribe(\"doordie_web\");\n    var message = new Paho.Message(payload);\n    message.destinationName = \"doordie_web\";\n    client.send(message);\n  },\n  // called when the client connects\n  onConnect: function () {\n    // Once a connection has been made report.\n    console.log(\"Connected\");\n  },\n  // called when the client loses its connection\n  onConnectionLost: function (responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"Mqtt.onConnectionLost:\" + responseObject.errorMessage);\n    }\n  },\n  // called when a message arrives\n  onMessageArrived: function (message) {\n    console.log(\"Mgtt.onMessageArrived:\" + message.payloadString);\n  },\n  // called to generate the IDs\n  makeid: function (length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  }\n};\nexport default Mqtt;","map":{"version":3,"sources":["C:/Users/chrib/Dropbox/Studium/5. Bristol/8.Software_Eng/Github/now-ui-kit-react-master/src/views/examples/MQTTclient.js"],"names":["jQuery","Paho","Mqtt","init","client","Client","makeid","connect","onSuccess","onConnect","onConnectionLost","onMessageArrived","pushNewChallenge","console","log","x","getByValue","newOrder","type","challenge_id","challenge_name","state","value","description","end_time","step_goal","reward","current_time","onSubmit","JSON","stringify","variable","document","getElementById","payload","subscribe","message","Message","destinationName","send","responseObject","errorCode","errorMessage","payloadString","length","result","characters","charactersLength","i","charAt","Math","floor","random"],"mappings":"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","sourcesContent":["// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\n\nconst Mqtt ={\n\ninit:function(){\n  var client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + Mqtt.makeid(3) )\n  client.connect({onSuccess:Mqtt.onConnect})\n  // set callback handlers\n  client.onConnectionLost = Mqtt.onConnectionLost\n  client.onMessageArrived = Mqtt.onMessageArrived\n  return client\n},\n\n\npushNewChallenge: function(client){\n  console.log(\"Pushing New Challenge\");\n  var x = Mqtt.getByValue(\"challenge-name\");\n\tvar newOrder = {\n    type: \"push new challenge\",\n    challenge_id: \"C\" + Mqtt.makeid(6),\n    challenge_name: Mqtt.state.value,\n    description: \"runrun\",\n    end_time: \"20-02-28 14:20\",\n    step_goal: \"2000\",\n    reward: \"200\",\n    current_time: \"2020-02-30T08:35:30.0108Z\"\n  }\n     //x.elements[3].value,\n  \t// delivery_address: x.elements[4].value,\n  \t// delivery_coordinates: x.elements[5].value\n  // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n\t// document.getElementById(\"status\").innerHTML = newOrder.order_status;\n\tMqtt.onSubmit(JSON.stringify(newOrder),client);\n},\n\ngetByValue: function(variable){\n  var x = document.getElementById(variable)\n  return x\n},\n\n// called when the client connects\nonSubmit: function(payload, client) {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onSubmit\");\n  client.subscribe(\"doordie_web\");\n  var message = new Paho.Message(payload);\n  message.destinationName = \"doordie_web\";\n  client.send(message);\n},\n\n\n// called when the client connects\nonConnect: function() {\n  // Once a connection has been made report.\n  console.log(\"Connected\");\n},\n\n// called when the client loses its connection\nonConnectionLost: function(responseObject) {\n  if (responseObject.errorCode !== 0) {\n    console.log(\"Mqtt.onConnectionLost:\"+responseObject.errorMessage);\n  }\n},\n\n// called when a message arrives\nonMessageArrived: function(message) {\n  console.log(\"Mgtt.onMessageArrived:\"+message.payloadString);\n},\n\n// called to generate the IDs\nmakeid: function(length) {\n   var result           = '';\n   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n   var charactersLength = characters.length;\n   for ( var i = 0; i < length; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n   }\n   return result;\n}\n\n}\nexport default Mqtt;\n"]},"metadata":{},"sourceType":"module"}