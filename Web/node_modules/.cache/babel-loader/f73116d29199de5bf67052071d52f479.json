{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chrib\\\\Dropbox\\\\Studium\\\\5. Bristol\\\\8.Software_Eng\\\\Github\\\\now-ui-kit-react-master\\\\src\\\\views\\\\examples\\\\MQTTclient.js\";\n// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport React from \"react\";\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\n\nclass Mqtt extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 'a'\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.pushNewChallenge = this.pushNewChallenge.bind(this);\n    this.client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + this.makeid(3));\n    this.client.connect({\n      onSuccess: this.onConnect\n    });\n    this.client.onConnectionLost = this.onConnectionLost;\n    this.client.onMessageArrived = this.onMessageArrived;\n  }\n\n  render() {\n    console.log(this.props.type);\n\n    if (this.props.type = \"set-challenge\") {\n      return this.renderSetChallenge();\n    }\n  }\n\n  renderSetChallenge() {\n    return React.createElement(\"form\", {\n      align: \"middle\",\n      onSubmit: this.pushNewChallenge,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Event Name: \", React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.handleChange,\n      value: this.state.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), \" \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"submit-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Place Order\"));\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  } // called when the client connects\n\n\n  onConnect() {\n    // Once a connection has been made report.\n    console.log(\"Connected\");\n  }\n\n  pushNewChallenge(event) {\n    event.preventDefault();\n    console.log(\"Pushing New Challenge\"); // var x = Mqtt.getByValue(\"challenge-name\");\n\n    var newOrder = {\n      type: \"push new challenge\",\n      challenge_id: \"C\" + this.makeid(6),\n      challenge_name: this.state.value,\n      description: \"runrun\",\n      end_time: \"20-02-28 14:20\",\n      step_goal: \"2000\",\n      reward: \"200\",\n      current_time: \"2020-02-30T08:35:30.0108Z\"\n    }; //x.elements[3].value,\n    // delivery_address: x.elements[4].value,\n    // delivery_coordinates: x.elements[5].value\n    // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n    // document.getElementById(\"status\").innerHTML = newOrder.order_status;\n\n    this.onSubmit(JSON.stringify(newOrder));\n  } // called when the client connects\n\n\n  onSubmit(payload) {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onSubmit\");\n    this.client.subscribe(\"doordie_web\");\n    var message = new Paho.Message(payload);\n    message.destinationName = \"doordie_web\";\n    this.client.send(message);\n  } // called to generate the IDs\n\n\n  makeid(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  } // called when the client loses its connection\n\n\n  onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"Mqtt.onConnectionLost:\" + responseObject.errorMessage);\n    }\n  } // called when a message arrives\n\n\n  onMessageArrived(message) {\n    console.log(\"Mgtt.onMessageArrived:\" + message.payloadString);\n  }\n\n}\n\nexport default Mqtt;","map":{"version":3,"sources":["C:/Users/chrib/Dropbox/Studium/5. Bristol/8.Software_Eng/Github/now-ui-kit-react-master/src/views/examples/MQTTclient.js"],"names":["React","jQuery","Paho","Mqtt","Component","constructor","props","state","value","handleChange","bind","pushNewChallenge","client","Client","makeid","connect","onSuccess","onConnect","onConnectionLost","onMessageArrived","render","console","log","type","renderSetChallenge","event","setState","target","preventDefault","newOrder","challenge_id","challenge_name","description","end_time","step_goal","reward","current_time","onSubmit","JSON","stringify","payload","subscribe","message","Message","destinationName","send","length","result","characters","charactersLength","i","charAt","Math","floor","random","responseObject","errorCode","errorMessage","payloadString"],"mappings":"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","sourcesContent":["// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport React from \"react\";\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\n\nclass Mqtt extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {value: 'a'};\n    this.handleChange = this.handleChange.bind(this);\n    this.pushNewChallenge = this.pushNewChallenge.bind(this);\n\n    this.client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + this.makeid(3) );\n    this.client.connect({onSuccess: this.onConnect});\n    this.client.onConnectionLost = this.onConnectionLost;\n    this.client.onMessageArrived = this.onMessageArrived;\n  }\n\n  render(){\n    console.log(this.props.type);\n\n\n      if(this.props.type = \"set-challenge\"){\n        return(\n          this.renderSetChallenge()\n        );\n\n      }\n  }\n\n  renderSetChallenge(){\n    return(\n    <form align=\"middle\"\n    onSubmit={this.pushNewChallenge}>\n    <label>Event Name: <input type=\"text\" onChange={this.handleChange} value={this.state.value}/> </label><p/>\n    <button className=\"submit-button\"\n     >Place Order</button>\n\n   </form>\n );\n\n  }\n\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  // called when the client connects\n  onConnect() {\n    // Once a connection has been made report.\n    console.log(\"Connected\");\n  }\n\n\n  pushNewChallenge(event){\n    event.preventDefault();\n    console.log(\"Pushing New Challenge\");\n    // var x = Mqtt.getByValue(\"challenge-name\");\n  \tvar newOrder = {\n      type: \"push new challenge\",\n      challenge_id: \"C\" + this.makeid(6),\n      challenge_name: this.state.value,\n      description: \"runrun\",\n      end_time: \"20-02-28 14:20\",\n      step_goal: \"2000\",\n      reward: \"200\",\n      current_time: \"2020-02-30T08:35:30.0108Z\"\n    }\n       //x.elements[3].value,\n    \t// delivery_address: x.elements[4].value,\n    \t// delivery_coordinates: x.elements[5].value\n    // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n  \t// document.getElementById(\"status\").innerHTML = newOrder.order_status;\n  \tthis.onSubmit(JSON.stringify(newOrder));\n  }\n\n  // called when the client connects\n  onSubmit(payload) {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onSubmit\");\n    this.client.subscribe(\"doordie_web\");\n    var message = new Paho.Message(payload);\n    message.destinationName = \"doordie_web\";\n    this.client.send(message);\n  }\n\n  // called to generate the IDs\n  makeid(length) {\n     var result           = '';\n     var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n     var charactersLength = characters.length;\n     for ( var i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n     }\n     return result;\n  }\n\n  // called when the client loses its connection\n  onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"Mqtt.onConnectionLost:\"+responseObject.errorMessage);\n    }\n  }\n\n  // called when a message arrives\n  onMessageArrived(message) {\n    console.log(\"Mgtt.onMessageArrived:\"+message.payloadString);\n  }\n\n}\nexport default Mqtt;\n"]},"metadata":{},"sourceType":"module"}