{"ast":null,"code":"// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\nconst Mqtt = {\n  init: function () {\n    var client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + Mqtt.makeid(3)); // set callback handlers\n\n    client.onConnectionLost = Mqtt.onConnectionLost;\n    client.onMessageArrived = Mqtt.onMessageArrived; // connect the client\n\n    client.connect({\n      onSuccess: onConnect\n    });\n  },\n  getByValue: function (variable) {\n    var x = document.getElementById(variable);\n    return x;\n  },\n  placeOrder: function () {\n    console.log(\"Hello\");\n    var text = \"\";\n    var newOrder = {\n      order_id: \"O\" + Mqtt.makeid(7),\n      // order_status: getByValue(\"Name\"),\n      user: {\n        user_name: \"Oli\" //x.elements[3].value,\n        // delivery_address: x.elements[4].value,\n        // delivery_coordinates: x.elements[5].value\n\n      }\n    }; // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n    // document.getElementById(\"status\").innerHTML = newOrder.order_status;\n\n    Mqtt.onSubmit(JSON.stringify(newOrder));\n  },\n  // called when the client connects\n  onSubmit: function (payload) {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onSubmit\");\n    client.subscribe(\"food_orders\");\n    var message = new Paho.Message(payload);\n    message.destinationName = \"food_orders\";\n    client.send(message);\n  },\n  // called when the client connects\n  onConnect: function () {\n    // Once a connection has been made report.\n    console.log(\"Connected\");\n  },\n  // called when the client loses its connection\n  onConnectionLost: function (responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"onConnectionLost:\" + responseObject.errorMessage);\n    }\n  },\n  // called when a message arrives\n  onMessageArrived: function (message) {\n    console.log(\"onMessageArrived:\" + message.payloadString);\n  },\n  // called to generate the IDs\n  makeid: function (length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  }\n};\nexport default Mqtt;","map":{"version":3,"sources":["C:/Users/chrib/Dropbox/Studium/5. Bristol/8.Software_Eng/Github/now-ui-kit-react-master/src/views/examples/MQTTclient.js"],"names":["jQuery","Paho","Mqtt","init","client","Client","makeid","onConnectionLost","onMessageArrived","connect","onSuccess","onConnect","getByValue","variable","x","document","getElementById","placeOrder","console","log","text","newOrder","order_id","user","user_name","onSubmit","JSON","stringify","payload","subscribe","message","Message","destinationName","send","responseObject","errorCode","errorMessage","payloadString","length","result","characters","charactersLength","i","charAt","Math","floor","random"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,MAAMC,IAAI,GAAE;AAEZC,EAAAA,IAAI,EAAE,YAAU;AACd,QAAIC,MAAM,GAAG,IAAIH,IAAI,CAACI,MAAT,CAAgB,0BAAhB,EAA4C,IAA5C,EAAkD,aAAaH,IAAI,CAACI,MAAL,CAAY,CAAZ,CAA/D,CAAb,CADc,CAGhB;;AACAF,IAAAA,MAAM,CAACG,gBAAP,GAA0BL,IAAI,CAACK,gBAA/B;AACAH,IAAAA,MAAM,CAACI,gBAAP,GAA0BN,IAAI,CAACM,gBAA/B,CALgB,CAOhB;;AACAJ,IAAAA,MAAM,CAACK,OAAP,CAAe;AAACC,MAAAA,SAAS,EAACC;AAAX,KAAf;AACC,GAXW;AAaZC,EAAAA,UAAU,EAAE,UAASC,QAAT,EAAkB;AAC5B,QAAIC,CAAC,GAAGC,QAAQ,CAACC,cAAT,CAAwBH,QAAxB,CAAR;AACA,WAAOC,CAAP;AACD,GAhBW;AAkBZG,EAAAA,UAAU,EAAE,YAAU;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,QAAIC,IAAI,GAAG,EAAX;AACD,QAAIC,QAAQ,GAAG;AACdC,MAAAA,QAAQ,EAAE,MAAMpB,IAAI,CAACI,MAAL,CAAY,CAAZ,CADF;AAEd;AACEiB,MAAAA,IAAI,EAAE;AACJC,QAAAA,SAAS,EAAE,KADP,CAEL;AACF;AACA;;AAJO;AAHM,KAAf,CAHqB,CAapB;AACD;;AACAtB,IAAAA,IAAI,CAACuB,QAAL,CAAcC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAAd;AACA,GAlCW;AAoCZ;AACAI,EAAAA,QAAQ,EAAE,UAASG,OAAT,EAAkB;AAC1B;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAf,IAAAA,MAAM,CAACyB,SAAP,CAAiB,aAAjB;AACA,QAAIC,OAAO,GAAG,IAAI7B,IAAI,CAAC8B,OAAT,CAAiBH,OAAjB,CAAd;AACAE,IAAAA,OAAO,CAACE,eAAR,GAA0B,aAA1B;AACA5B,IAAAA,MAAM,CAAC6B,IAAP,CAAYH,OAAZ;AACD,GA5CW;AA+CZ;AACAnB,EAAAA,SAAS,EAAE,YAAW;AACpB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,GAnDW;AAqDZ;AACAZ,EAAAA,gBAAgB,EAAE,UAAS2B,cAAT,EAAyB;AACzC,QAAIA,cAAc,CAACC,SAAf,KAA6B,CAAjC,EAAoC;AAClCjB,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAoBe,cAAc,CAACE,YAA/C;AACD;AACF,GA1DW;AA4DZ;AACA5B,EAAAA,gBAAgB,EAAE,UAASsB,OAAT,EAAkB;AAClCZ,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAoBW,OAAO,CAACO,aAAxC;AACD,GA/DW;AAiEZ;AACA/B,EAAAA,MAAM,EAAE,UAASgC,MAAT,EAAiB;AACtB,QAAIC,MAAM,GAAa,EAAvB;AACA,QAAIC,UAAU,GAAS,gEAAvB;AACA,QAAIC,gBAAgB,GAAGD,UAAU,CAACF,MAAlC;;AACA,SAAM,IAAII,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGJ,MAArB,EAA6BI,CAAC,EAA9B,EAAmC;AAChCH,MAAAA,MAAM,IAAIC,UAAU,CAACG,MAAX,CAAkBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,gBAA3B,CAAlB,CAAV;AACF;;AACD,WAAOF,MAAP;AACF;AA1EW,CAAZ;AA6EA,eAAerC,IAAf","sourcesContent":["// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\n\nconst Mqtt ={\n\ninit: function(){\n  var client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + Mqtt.makeid(3) )\n\n// set callback handlers\nclient.onConnectionLost = Mqtt.onConnectionLost\nclient.onMessageArrived = Mqtt.onMessageArrived\n\n// connect the client\nclient.connect({onSuccess:onConnect})\n},\n\ngetByValue: function(variable){\n  var x = document.getElementById(variable)\n  return x\n},\n\nplaceOrder: function(){\n  console.log(\"Hello\");\n  var text = \"\";\n\tvar newOrder = {\n  order_id: \"O\" + Mqtt.makeid(7),\n  // order_status: getByValue(\"Name\"),\n    user: {\n\t\t    user_name: \"Oli\"\n     //x.elements[3].value,\n  \t// delivery_address: x.elements[4].value,\n  \t// delivery_coordinates: x.elements[5].value\n\t },\n  }\n  // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n\t// document.getElementById(\"status\").innerHTML = newOrder.order_status;\n\tMqtt.onSubmit(JSON.stringify(newOrder));\n},\n\n// called when the client connects\nonSubmit: function(payload) {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onSubmit\");\n  client.subscribe(\"food_orders\");\n  var message = new Paho.Message(payload);\n  message.destinationName = \"food_orders\";\n  client.send(message);\n},\n\n\n// called when the client connects\nonConnect: function() {\n  // Once a connection has been made report.\n  console.log(\"Connected\");\n},\n\n// called when the client loses its connection\nonConnectionLost: function(responseObject) {\n  if (responseObject.errorCode !== 0) {\n    console.log(\"onConnectionLost:\"+responseObject.errorMessage);\n  }\n},\n\n// called when a message arrives\nonMessageArrived: function(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n},\n\n// called to generate the IDs\nmakeid: function(length) {\n   var result           = '';\n   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n   var charactersLength = characters.length;\n   for ( var i = 0; i < length; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n   }\n   return result;\n}\n\n}\nexport default Mqtt;\n"]},"metadata":{},"sourceType":"module"}