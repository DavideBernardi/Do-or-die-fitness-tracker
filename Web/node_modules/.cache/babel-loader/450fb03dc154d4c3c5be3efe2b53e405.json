{"ast":null,"code":"// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport React from \"react\";\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\n\nclass Mqtt extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + this.makeid(3));\n    this.client.connect({\n      onSuccess: this.onConnect\n    }); // set callback handlers\n    // client.onConnectionLost = Mqtt.onConnectionLost;\n    // client.onMessageArrived = Mqtt.onMessageArrived;\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  } // called when the client connects\n\n\n  onConnect() {\n    // Once a connection has been made report.\n    console.log(\"Connected\");\n  }\n\n  pushNewChallenge(event) {\n    console.log(\"Pushing New Challenge\"); // var x = Mqtt.getByValue(\"challenge-name\");\n\n    var newOrder = {\n      type: \"push new challenge\",\n      challenge_id: \"C\" + this.makeid(6),\n      challenge_name: this.state.value,\n      description: \"runrun\",\n      end_time: \"20-02-28 14:20\",\n      step_goal: \"2000\",\n      reward: \"200\",\n      current_time: \"2020-02-30T08:35:30.0108Z\"\n    }; //x.elements[3].value,\n    // delivery_address: x.elements[4].value,\n    // delivery_coordinates: x.elements[5].value\n    // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n    // document.getElementById(\"status\").innerHTML = newOrder.order_status;\n\n    this.onSubmit(JSON.stringify(newOrder));\n  } // called when the client connects\n\n\n  onSubmit(payload) {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onSubmit\");\n    this.client.subscribe(\"doordie_web\");\n    var message = new Paho.Message(payload);\n    message.destinationName = \"doordie_web\";\n    this.client.send(message);\n  } // called to generate the IDs\n\n\n  makeid(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  }\n\n}\n\nexport default Mqtt;","map":{"version":3,"sources":["C:/Users/chrib/Dropbox/Studium/5. Bristol/8.Software_Eng/Github/now-ui-kit-react-master/src/views/examples/MQTTclient.js"],"names":["React","jQuery","Paho","Mqtt","Component","constructor","props","state","value","handleChange","bind","client","Client","makeid","connect","onSuccess","onConnect","event","setState","target","console","log","pushNewChallenge","newOrder","type","challenge_id","challenge_name","description","end_time","step_goal","reward","current_time","onSubmit","JSON","stringify","payload","subscribe","message","Message","destinationName","send","length","result","characters","charactersLength","i","charAt","Math","floor","random"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAGA,MAAMC,IAAN,SAAmBH,KAAK,CAACI,SAAzB,CAAmC;AAEjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAb;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,MAAL,GAAc,IAAIT,IAAI,CAACU,MAAT,CAAgB,0BAAhB,EAA4C,IAA5C,EAAkD,aAAa,KAAKC,MAAL,CAAY,CAAZ,CAA/D,CAAd;AACA,SAAKF,MAAL,CAAYG,OAAZ,CAAoB;AAACC,MAAAA,SAAS,EAAE,KAAKC;AAAjB,KAApB,EALiB,CAMjB;AACA;AACA;AACD;;AACDP,EAAAA,YAAY,CAACQ,KAAD,EAAQ;AAClB,SAAKC,QAAL,CAAc;AAACV,MAAAA,KAAK,EAAES,KAAK,CAACE,MAAN,CAAaX;AAArB,KAAd;AACD,GAdgC,CAgBjC;;;AACAQ,EAAAA,SAAS,GAAG;AACV;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;;AAEDC,EAAAA,gBAAgB,CAACL,KAAD,EAAO;AACrBG,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EADqB,CAErB;;AACD,QAAIE,QAAQ,GAAG;AACZC,MAAAA,IAAI,EAAE,oBADM;AAEZC,MAAAA,YAAY,EAAE,MAAM,KAAKZ,MAAL,CAAY,CAAZ,CAFR;AAGZa,MAAAA,cAAc,EAAE,KAAKnB,KAAL,CAAWC,KAHf;AAIZmB,MAAAA,WAAW,EAAE,QAJD;AAKZC,MAAAA,QAAQ,EAAE,gBALE;AAMZC,MAAAA,SAAS,EAAE,MANC;AAOZC,MAAAA,MAAM,EAAE,KAPI;AAQZC,MAAAA,YAAY,EAAE;AARF,KAAf,CAHsB,CAalB;AACF;AACA;AACD;AACD;;AACA,SAAKC,QAAL,CAAcC,IAAI,CAACC,SAAL,CAAeX,QAAf,CAAd;AACA,GAzCgC,CA2CjC;;;AACAS,EAAAA,QAAQ,CAACG,OAAD,EAAU;AAChB;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,SAAKV,MAAL,CAAYyB,SAAZ,CAAsB,aAAtB;AACA,QAAIC,OAAO,GAAG,IAAInC,IAAI,CAACoC,OAAT,CAAiBH,OAAjB,CAAd;AACAE,IAAAA,OAAO,CAACE,eAAR,GAA0B,aAA1B;AACA,SAAK5B,MAAL,CAAY6B,IAAZ,CAAiBH,OAAjB;AACD,GAnDgC,CAqDjC;;;AACAxB,EAAAA,MAAM,CAAC4B,MAAD,EAAS;AACZ,QAAIC,MAAM,GAAa,EAAvB;AACA,QAAIC,UAAU,GAAS,gEAAvB;AACA,QAAIC,gBAAgB,GAAGD,UAAU,CAACF,MAAlC;;AACA,SAAM,IAAII,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGJ,MAArB,EAA6BI,CAAC,EAA9B,EAAmC;AAChCH,MAAAA,MAAM,IAAIC,UAAU,CAACG,MAAX,CAAkBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,gBAA3B,CAAlB,CAAV;AACF;;AACD,WAAOF,MAAP;AACF;;AA9DgC;;AAiEnC,eAAevC,IAAf","sourcesContent":["// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport React from \"react\";\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\n\n\nclass Mqtt extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n    this.handleChange = this.handleChange.bind(this);\n    this.client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + this.makeid(3) );\n    this.client.connect({onSuccess: this.onConnect});\n    // set callback handlers\n    // client.onConnectionLost = Mqtt.onConnectionLost;\n    // client.onMessageArrived = Mqtt.onMessageArrived;\n  }\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  // called when the client connects\n  onConnect() {\n    // Once a connection has been made report.\n    console.log(\"Connected\");\n  }\n\n  pushNewChallenge(event){\n    console.log(\"Pushing New Challenge\");\n    // var x = Mqtt.getByValue(\"challenge-name\");\n  \tvar newOrder = {\n      type: \"push new challenge\",\n      challenge_id: \"C\" + this.makeid(6),\n      challenge_name: this.state.value,\n      description: \"runrun\",\n      end_time: \"20-02-28 14:20\",\n      step_goal: \"2000\",\n      reward: \"200\",\n      current_time: \"2020-02-30T08:35:30.0108Z\"\n    }\n       //x.elements[3].value,\n    \t// delivery_address: x.elements[4].value,\n    \t// delivery_coordinates: x.elements[5].value\n    // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n  \t// document.getElementById(\"status\").innerHTML = newOrder.order_status;\n  \tthis.onSubmit(JSON.stringify(newOrder));\n  }\n\n  // called when the client connects\n  onSubmit(payload) {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onSubmit\");\n    this.client.subscribe(\"doordie_web\");\n    var message = new Paho.Message(payload);\n    message.destinationName = \"doordie_web\";\n    this.client.send(message);\n  }\n\n  // called to generate the IDs\n  makeid(length) {\n     var result           = '';\n     var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n     var charactersLength = characters.length;\n     for ( var i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n     }\n     return result;\n  }\n\n}\nexport default Mqtt;\n"]},"metadata":{},"sourceType":"module"}