{"ast":null,"code":"// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\nvar client = new Paho.MQTT.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + makeid(3)); // set callback handlers\n\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived; // connect the client\n\nclient.connect({\n  onSuccess: onConnect\n});\n\nfunction getByValue(variable) {\n  var x = document.getElementById(variable);\n  return x;\n}\n\nfunction placeOrder() {\n  var text = \"\";\n  var newOrder = {\n    order_id: \"O\" + makeid(7),\n    // order_status: getByValue(\"Name\"),\n    user: {\n      user_name: \"Oli\" //x.elements[3].value,\n      // delivery_address: x.elements[4].value,\n      // delivery_coordinates: x.elements[5].value\n\n    }\n  }; // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n  // document.getElementById(\"status\").innerHTML = newOrder.order_status;\n\n  onSubmit(JSON.stringify(newOrder));\n} // called when the client connects\n\n\nfunction onSubmit(payload) {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onSubmit\");\n  client.subscribe(\"food_orders\");\n  var message = new Paho.MQTT.Message(payload);\n  message.destinationName = \"food_orders\";\n  client.send(message);\n} // called when the client connects\n\n\nfunction onConnect() {\n  // Once a connection has been made report.\n  console.log(\"Connected\");\n} // called when the client loses its connection\n\n\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0) {\n    console.log(\"onConnectionLost:\" + responseObject.errorMessage);\n  }\n} // called when a message arrives\n\n\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\" + message.payloadString);\n} // called to generate the IDs\n\n\nfunction makeid(length) {\n  var result = '';\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/chrib/Dropbox/Studium/5. Bristol/8.Software_Eng/Github/now-ui-kit-react-master/src/views/examples/MQTTclient.js"],"names":["jQuery","Paho","client","MQTT","Client","makeid","onConnectionLost","onMessageArrived","connect","onSuccess","onConnect","getByValue","variable","x","document","getElementById","placeOrder","text","newOrder","order_id","user","user_name","onSubmit","JSON","stringify","payload","console","log","subscribe","message","Message","destinationName","send","responseObject","errorCode","errorMessage","payloadString","length","result","characters","charactersLength","i","charAt","Math","floor","random"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,IAAIC,MAAM,GAAG,IAAID,IAAI,CAACE,IAAL,CAAUC,MAAd,CAAqB,0BAArB,EAAiD,IAAjD,EAAuD,aAAaC,MAAM,CAAC,CAAD,CAA1E,CAAb,C,CAEA;;AACAH,MAAM,CAACI,gBAAP,GAA0BA,gBAA1B;AACAJ,MAAM,CAACK,gBAAP,GAA0BA,gBAA1B,C,CAEA;;AACAL,MAAM,CAACM,OAAP,CAAe;AAACC,EAAAA,SAAS,EAACC;AAAX,CAAf;;AAEA,SAASC,UAAT,CAAoBC,QAApB,EAA6B;AAC3B,MAAIC,CAAC,GAAGC,QAAQ,CAACC,cAAT,CAAwBH,QAAxB,CAAR;AACA,SAAOC,CAAP;AACD;;AAED,SAASG,UAAT,GAAsB;AACpB,MAAIC,IAAI,GAAG,EAAX;AAED,MAAIC,QAAQ,GAAG;AACdC,IAAAA,QAAQ,EAAE,MAAMd,MAAM,CAAC,CAAD,CADR;AAEd;AACEe,IAAAA,IAAI,EAAE;AACJC,MAAAA,SAAS,EAAE,KADP,CAEL;AACF;AACA;;AAJO;AAHM,GAAf,CAHqB,CAcpB;AACD;;AACAC,EAAAA,QAAQ,CAACC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAAD,CAAR;AACA,C,CAED;;;AACA,SAASI,QAAT,CAAkBG,OAAlB,EAA2B;AACzB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAzB,EAAAA,MAAM,CAAC0B,SAAP,CAAiB,aAAjB;AACA,MAAIC,OAAO,GAAG,IAAI5B,IAAI,CAACE,IAAL,CAAU2B,OAAd,CAAsBL,OAAtB,CAAd;AACAI,EAAAA,OAAO,CAACE,eAAR,GAA0B,aAA1B;AACA7B,EAAAA,MAAM,CAAC8B,IAAP,CAAYH,OAAZ;AACD,C,CAID;;;AACA,SAASnB,SAAT,GAAqB;AACnB;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,C,CAED;;;AACA,SAASrB,gBAAT,CAA0B2B,cAA1B,EAA0C;AACxC,MAAIA,cAAc,CAACC,SAAf,KAA6B,CAAjC,EAAoC;AAClCR,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAoBM,cAAc,CAACE,YAA/C;AACD;AACF,C,CAED;;;AACA,SAAS5B,gBAAT,CAA0BsB,OAA1B,EAAmC;AACjCH,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAoBE,OAAO,CAACO,aAAxC;AACD,C,CAED;;;AACA,SAAS/B,MAAT,CAAgBgC,MAAhB,EAAwB;AACrB,MAAIC,MAAM,GAAa,EAAvB;AACA,MAAIC,UAAU,GAAS,gEAAvB;AACA,MAAIC,gBAAgB,GAAGD,UAAU,CAACF,MAAlC;;AACA,OAAM,IAAII,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGJ,MAArB,EAA6BI,CAAC,EAA9B,EAAmC;AAChCH,IAAAA,MAAM,IAAIC,UAAU,CAACG,MAAX,CAAkBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,gBAA3B,CAAlB,CAAV;AACF;;AACD,SAAOF,MAAP;AACF","sourcesContent":["// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\n\nvar client = new Paho.MQTT.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + makeid(3) );\n\n// set callback handlers\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\n\n// connect the client\nclient.connect({onSuccess:onConnect});\n\nfunction getByValue(variable){\n  var x = document.getElementById(variable);\n  return x;\n}\n\nfunction placeOrder() {\n  var text = \"\";\n\n\tvar newOrder = {\n  order_id: \"O\" + makeid(7),\n  // order_status: getByValue(\"Name\"),\n    user: {\n\t\t    user_name: \"Oli\"\n     //x.elements[3].value,\n  \t// delivery_address: x.elements[4].value,\n  \t// delivery_coordinates: x.elements[5].value\n\t },\n  }\n\n  // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n\t// document.getElementById(\"status\").innerHTML = newOrder.order_status;\n\tonSubmit(JSON.stringify(newOrder));\n}\n\n// called when the client connects\nfunction onSubmit(payload) {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onSubmit\");\n  client.subscribe(\"food_orders\");\n  var message = new Paho.MQTT.Message(payload);\n  message.destinationName = \"food_orders\";\n  client.send(message);\n}\n\n\n\n// called when the client connects\nfunction onConnect() {\n  // Once a connection has been made report.\n  console.log(\"Connected\");\n}\n\n// called when the client loses its connection\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0) {\n    console.log(\"onConnectionLost:\"+responseObject.errorMessage);\n  }\n}\n\n// called when a message arrives\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n}\n\n// called to generate the IDs\nfunction makeid(length) {\n   var result           = '';\n   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n   var charactersLength = characters.length;\n   for ( var i = 0; i < length; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n   }\n   return result;\n}\n"]},"metadata":{},"sourceType":"module"}