{"ast":null,"code":"// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport Jquery from 'jquery';\nimport Paho from 'paho-mqtt';\nclient = new Paho.MQTT.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + makeid(3)); // set callback handlers\n\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived; // connect the client\n\nclient.connect({\n  onSuccess: onConnect\n});\n\nfunction getByValue(variable) {\n  var x = document.getElementById(variable);\n  return x;\n}\n\nfunction placeOrder() {\n  var text = \"\";\n  var newOrder = {\n    order_id: \"O\" + makeid(7),\n    order_status: getByValue(\"Name\"),\n    delivery_id: \"D\" + makeid(7),\n    delivery: {\n      delivery_name: x.elements[3].value,\n      delivery_address: x.elements[4].value,\n      delivery_coordinates: x.elements[5].value\n    },\n    restaurant: {\n      restaurant_id: x.elements[6].value,\n      restaurant_name: x.elements[7].value,\n      restaurant_coordinates: x.elements[8].value\n    },\n    order_items: x.elements[9].value,\n    order_total: x.elements[10].value,\n    order_currency: x.elements[11].value,\n    order_placed: x.elements[12].value\n  };\n  document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n  document.getElementById(\"status\").innerHTML = newOrder.order_status;\n  onSubmit(JSON.stringify(newOrder));\n} // called when the client connects\n\n\nfunction onSubmit(payload) {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onSubmit\");\n  client.subscribe(\"food_orders\");\n  message = new Paho.MQTT.Message(payload);\n  message.destinationName = \"food_orders\";\n  client.send(message);\n}\n\nfunction updateTable(payload) {\n  var tr;\n  tr = $('<tr/>');\n  tr.append(\"<td>\" + json[0].order_id + \"</td>\");\n  tr.append(\"<td>\" + json[1].status + \"</td>\");\n  tr.append(\"<td>\" + json[4].delivery_address + \"</td>\");\n  $('table').append(tr);\n} // called when the client connects\n\n\nfunction onConnect() {\n  // Once a connection has been made report.\n  console.log(\"Connected\");\n} // called when the client loses its connection\n\n\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0) {\n    console.log(\"onConnectionLost:\" + responseObject.errorMessage);\n  }\n} // called when a message arrives\n\n\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\" + message.payloadString);\n} // called to generate the IDs\n\n\nfunction makeid(length) {\n  var result = '';\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return result;\n}\n\nexport default MQTT - client;","map":{"version":3,"sources":["C:/Users/chrib/Dropbox/Studium/5. Bristol/8.Software_Eng/Github/now-ui-kit-react-master/src/views/examples/MQTT-client.js"],"names":["Jquery","Paho","client","MQTT","Client","makeid","onConnectionLost","onMessageArrived","connect","onSuccess","onConnect","getByValue","variable","x","document","getElementById","placeOrder","text","newOrder","order_id","order_status","delivery_id","delivery","delivery_name","elements","value","delivery_address","delivery_coordinates","restaurant","restaurant_id","restaurant_name","restaurant_coordinates","order_items","order_total","order_currency","order_placed","innerHTML","JSON","stringify","onSubmit","payload","console","log","subscribe","message","Message","destinationName","send","updateTable","tr","$","append","json","status","responseObject","errorCode","errorMessage","payloadString","length","result","characters","charactersLength","i","charAt","Math","floor","random"],"mappings":"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","sourcesContent":["// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport Jquery from 'jquery';\nimport Paho from 'paho-mqtt';\n\nclient = new Paho.MQTT.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + makeid(3) );\n\n// set callback handlers\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\n\n// connect the client\nclient.connect({onSuccess:onConnect});\n\nfunction getByValue(variable){\n  var x = document.getElementById(variable);\n  return x;\n}\n\nfunction placeOrder() {\n  var text = \"\";\n\n\tvar newOrder = {\n  order_id: \"O\" + makeid(7),\n  order_status: getByValue(\"Name\"),\n  delivery_id: \"D\" + makeid(7),\n  delivery: {\n\t\tdelivery_name: x.elements[3].value,\n  \tdelivery_address: x.elements[4].value,\n  \tdelivery_coordinates: x.elements[5].value\n\t},\n\trestaurant: {\n\t\trestaurant_id: x.elements[6].value,\n\t  restaurant_name: x.elements[7].value,\n\t  restaurant_coordinates: x.elements[8].value\n\t},\n  order_items: x.elements[9].value,\n  order_total: x.elements[10].value,\n  order_currency: x.elements[11].value,\n  order_placed: x.elements[12].value };\n\n  document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n\tdocument.getElementById(\"status\").innerHTML = newOrder.order_status;\n\tonSubmit(JSON.stringify(newOrder));\n}\n\n// called when the client connects\nfunction onSubmit(payload) {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onSubmit\");\n  client.subscribe(\"food_orders\");\n  message = new Paho.MQTT.Message(payload);\n  message.destinationName = \"food_orders\";\n  client.send(message);\n}\n\nfunction updateTable(payload){\n\tvar tr;\n\ttr = $('<tr/>');\n\ttr.append(\"<td>\" + json[0].order_id + \"</td>\");\n\ttr.append(\"<td>\" + json[1].status + \"</td>\");\n\ttr.append(\"<td>\" + json[4].delivery_address + \"</td>\");\n\t$('table').append(tr);\n}\n\n// called when the client connects\nfunction onConnect() {\n  // Once a connection has been made report.\n  console.log(\"Connected\");\n}\n\n// called when the client loses its connection\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0) {\n    console.log(\"onConnectionLost:\"+responseObject.errorMessage);\n  }\n}\n\n// called when a message arrives\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n}\n\n// called to generate the IDs\nfunction makeid(length) {\n   var result           = '';\n   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n   var charactersLength = characters.length;\n   for ( var i = 0; i < length; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n   }\n   return result;\n}\n\nexport default MQTT-client;\n"]},"metadata":{},"sourceType":"module"}