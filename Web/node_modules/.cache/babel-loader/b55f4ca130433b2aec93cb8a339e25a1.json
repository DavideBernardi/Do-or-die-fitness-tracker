{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chrib\\\\Dropbox\\\\Studium\\\\5. Bristol\\\\8.Software_Eng\\\\Github\\\\now-ui-kit-react-master\\\\src\\\\views\\\\examples\\\\MQTTclient.js\";\n// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport React from \"react\";\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\n\nclass Mqtt extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      challenge_name: '',\n      challenge_description: '',\n      challenge_step_goal: '',\n      challenge_end_date: '20-03-31',\n      challenge_reward: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.pushNewChallenge = this.pushNewChallenge.bind(this);\n    this.client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + this.makeid(3));\n    this.client.connect({\n      onSuccess: this.onConnect\n    });\n    this.client.onConnectionLost = this.onConnectionLost;\n    this.client.onMessageArrived = this.onMessageArrived;\n  }\n\n  render() {\n    if (this.props.type === \"set-challenge\") {\n      return this.renderSetChallenge();\n    }\n  }\n\n  renderSetChallenge() {\n    return React.createElement(\"form\", {\n      align: \"left\",\n      onSubmit: this.validateInput.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Challenge Name:  \"), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.challenge_name,\n      onChange: event => this.handleChange('challenge_name', event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Description:  \"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"challenge-textfield\",\n      value: this.state.challenge_description,\n      onChange: event => this.handleChange('challenge_description', event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"End Date: \"), React.createElement(\"input\", {\n      type: \"date\",\n      value: this.state.challenge_end_date,\n      onChange: event => this.handleChange('challenge_end_date', event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Step Goal: \"), React.createElement(\"input\", {\n      type: \"number\",\n      value: this.state.challenge_step_goal,\n      onChange: event => this.handleChange('challenge_step_goal', event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"User Reward: \"), React.createElement(\"input\", {\n      type: \"number\",\n      value: this.state.challenge_reward,\n      onChange: event => this.handleChange('challenge_reward', event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"submit-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Create Challenge\"));\n  }\n\n  handleChange(type, event) {\n    this.setState({\n      [type]: event.target.value\n    });\n  } // called when the client connects\n\n\n  onConnect() {\n    // Once a connection has been made report.\n    console.log(\"Connected\");\n  }\n\n  validateInput(event) {\n    event.preventDefault();\n    var flag = 0;\n\n    if (this.state.challenge_name === '' || this.state.challenge_description === '' || this.state.challenge_reward === '' || this.state.challenge_step_goal === '') {\n      alert(\"Please complete all fields\");\n    } else if (this.state.challenge_reward >= 0 && this.state.challenge_step_goal >= 0) {\n      this.pushNewChallenge(event);\n    } else {\n      alert(\"Please enter positive numbers\");\n    }\n  }\n\n  pushNewChallenge(event) {\n    console.log(JSON.stringify(this.state.challenge_name)); // var x = Mqtt.getByValue(\"challenge-name\");\n\n    console.log(\"Pushing New Challenge\");\n    var today = new Date(),\n        date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate() + 'T' + today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds() + '.' + today.getMilliseconds() + 'Z';\n    var newOrder = {\n      type: \"push new challenge\",\n      challenge_id: \"C\" + this.makeid(6),\n      challenge_name: this.state.challenge_name,\n      description: this.state.challenge_description,\n      end_time: this.state.challenge_end_date,\n      step_goal: this.state.challenge_step_goal,\n      reward: this.state.challenge_reward,\n      current_time: date\n    }; //x.elements[3].value,\n    // delivery_address: x.elements[4].value,\n    // delivery_coordinates: x.elements[5].value\n    // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n    // document.getElementById(\"status\").innerHTML = newOrder.order_status;\n\n    this.onSubmit(JSON.stringify(newOrder));\n  } // called when the client connects\n\n\n  onSubmit(payload) {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onSubmit\");\n    this.client.subscribe(\"doordie_web\");\n    var message = new Paho.Message(payload);\n    message.destinationName = \"doordie_web\";\n    this.client.send(message);\n  } // called to generate the IDs\n\n\n  makeid(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  } // called when the client loses its connection\n\n\n  onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"Mqtt.onConnectionLost:\" + responseObject.errorMessage);\n    }\n  } // called when a message arrives\n\n\n  onMessageArrived(message) {\n    console.log(\"Mgtt.onMessageArrived:\" + message.payloadString);\n  }\n\n}\n\nexport default Mqtt;","map":{"version":3,"sources":["C:/Users/chrib/Dropbox/Studium/5. Bristol/8.Software_Eng/Github/now-ui-kit-react-master/src/views/examples/MQTTclient.js"],"names":["React","jQuery","Paho","Mqtt","Component","constructor","props","state","challenge_name","challenge_description","challenge_step_goal","challenge_end_date","challenge_reward","handleChange","bind","pushNewChallenge","client","Client","makeid","connect","onSuccess","onConnect","onConnectionLost","onMessageArrived","render","type","renderSetChallenge","validateInput","event","setState","target","value","console","log","preventDefault","flag","alert","JSON","stringify","today","Date","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","newOrder","challenge_id","description","end_time","step_goal","reward","current_time","onSubmit","payload","subscribe","message","Message","destinationName","send","length","result","characters","charactersLength","i","charAt","Math","floor","random","responseObject","errorCode","errorMessage","payloadString"],"mappings":"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","sourcesContent":["// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport React from \"react\";\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\n\nclass Mqtt extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        challenge_name: '',\n        challenge_description: '',\n        challenge_step_goal: '',\n        challenge_end_date: '20-03-31',\n        challenge_reward: '',\n\n\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.pushNewChallenge = this.pushNewChallenge.bind(this);\n\n    this.client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + this.makeid(3) );\n    this.client.connect({onSuccess: this.onConnect});\n    this.client.onConnectionLost = this.onConnectionLost;\n    this.client.onMessageArrived = this.onMessageArrived;\n  }\n\n  render(){\n      if(this.props.type === \"set-challenge\"){\n        return(this.renderSetChallenge())\n      }\n  }\n\n  renderSetChallenge(){\n    return(\n      <form align=\"left\" onSubmit={this.validateInput.bind(this)} >\n      <label className =\"form-label\">Challenge Name:  </label>\n      <input type=\"text\"  value={this.state.challenge_name} onChange={(event) => this.handleChange('challenge_name', event)} /><p/>\n      <label className =\"form-label\">Description:  </label>\n      <input type=\"text\" className='challenge-textfield' value={this.state.challenge_description} onChange={(event) => this.handleChange('challenge_description', event)} /><p/>\n      <label className =\"form-label\">End Date: </label>\n      <input type=\"date\"  value={this.state.challenge_end_date} onChange={(event) => this.handleChange('challenge_end_date', event)} /><p/>\n      <label className =\"form-label\">Step Goal: </label>\n      <input type=\"number\"  value={this.state.challenge_step_goal} onChange={(event) => this.handleChange('challenge_step_goal', event)}/><p/>\n      <label className =\"form-label\">User Reward: </label>\n      <input type=\"number\"  value={this.state.challenge_reward} onChange={(event) => this.handleChange('challenge_reward', event)}/><p/>\n\n      <button className=\"submit-button\">Create Challenge</button>\n      </form>\n    )\n  }\n\n  handleChange(type,event) {\n     this.setState({[type]: event.target.value});\n  }\n\n  // called when the client connects\n  onConnect() {\n    // Once a connection has been made report.\n    console.log(\"Connected\");\n  }\n\n  validateInput(event){\n    event.preventDefault();\n    var flag = 0;\n    if(this.state.challenge_name === '' || this.state.challenge_description === '' || this.state.challenge_reward === '' || this.state.challenge_step_goal === ''){\n      alert(\"Please complete all fields\");\n    }\n    else if(this.state.challenge_reward >=0 && this.state.challenge_step_goal >=0){\n      this.pushNewChallenge(event);\n    }\n    else{\n      alert(\"Please enter positive numbers\");\n\n    }\n  }\n\n\n  pushNewChallenge(event){\n    console.log(JSON.stringify(this.state.challenge_name));\n    // var x = Mqtt.getByValue(\"challenge-name\");\n    console.log(\"Pushing New Challenge\");\n    var today = new Date(),\n    date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate()+'T'+today.getHours()+':'+today.getMinutes()+':'+today.getSeconds()+'.'+today.getMilliseconds()+'Z';\n  \tvar newOrder = {\n      type: \"push new challenge\",\n      challenge_id: \"C\" + this.makeid(6),\n      challenge_name: this.state.challenge_name,\n      description: this.state.challenge_description,\n      end_time: this.state.challenge_end_date,\n      step_goal: this.state.challenge_step_goal,\n      reward: this.state.challenge_reward,\n      current_time: date\n    }\n       //x.elements[3].value,\n    \t// delivery_address: x.elements[4].value,\n    \t// delivery_coordinates: x.elements[5].value\n    // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n  \t// document.getElementById(\"status\").innerHTML = newOrder.order_status;\n  \tthis.onSubmit(JSON.stringify(newOrder));\n  }\n\n  // called when the client connects\n  onSubmit(payload) {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onSubmit\");\n    this.client.subscribe(\"doordie_web\");\n    var message = new Paho.Message(payload);\n    message.destinationName = \"doordie_web\";\n    this.client.send(message);\n  }\n\n  // called to generate the IDs\n  makeid(length) {\n     var result           = '';\n     var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n     var charactersLength = characters.length;\n     for ( var i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n     }\n     return result;\n  }\n\n  // called when the client loses its connection\n  onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"Mqtt.onConnectionLost:\"+responseObject.errorMessage);\n    }\n  }\n\n  // called when a message arrives\n  onMessageArrived(message) {\n    console.log(\"Mgtt.onMessageArrived:\"+message.payloadString);\n  }\n\n}\nexport default Mqtt;\n"]},"metadata":{},"sourceType":"module"}