{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chrib\\\\Dropbox\\\\Studium\\\\5. Bristol\\\\8.Software_Eng\\\\Github\\\\now-ui-kit-react-master\\\\src\\\\views\\\\examples\\\\MQTTclient.js\";\n// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport React from \"react\";\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\n\nclass Mqtt extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      challenge_name: 'a',\n      challenge_description: undefined\n    };\n    this.handleChangeChallangeName = this.handleChangeChallangeName.bind(this);\n    this.pushNewChallenge = this.pushNewChallenge.bind(this);\n    this.client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + this.makeid(3));\n    this.client.connect({\n      onSuccess: this.onConnect\n    });\n    this.client.onConnectionLost = this.onConnectionLost;\n    this.client.onMessageArrived = this.onMessageArrived;\n  }\n\n  render() {\n    if (this.props.type === \"set-challenge\") {\n      return this.renderSetChallenge();\n    }\n  }\n\n  renderSetChallenge() {\n    return React.createElement(\"form\", {\n      align: \"middle\",\n      onSubmit: this.pushNewChallenge,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Event Name: \", React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.handleChangeChallangeName,\n      value: this.state.challenge_name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), \" \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Description: \", React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.handleChangeChallangeName,\n      value: this.state.challenge_description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), \" \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Start Date: \", React.createElement(\"input\", {\n      type: \"date\",\n      name: \"startdate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"End Date: \", React.createElement(\"input\", {\n      type: \"date\",\n      name: \"enddate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Location: \", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"location\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"User Bonus: \", React.createElement(\"input\", {\n      type: \"number\",\n      name: \"reward\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Asset URL: \", React.createElement(\"input\", {\n      type: \"url\",\n      name: \"sponsorimgurl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"submit-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Place Order\"));\n  }\n\n  handleChangeChallangeName(event) {\n    const value = evt.target.value;\n    this.setState({ ...state,\n      [evt.target.name]: value\n    });\n  } // called when the client connects\n\n\n  onConnect() {\n    // Once a connection has been made report.\n    console.log(\"Connected\");\n  }\n\n  pushNewChallenge(event) {\n    event.preventDefault();\n    console.log(JSON.stringify(this.state.challenge_name)); // var x = Mqtt.getByValue(\"challenge-name\");\n\n    console.log(\"Pushing New Challenge\");\n    var newOrder = {\n      type: \"push new challenge\",\n      challenge_id: \"C\" + this.makeid(6),\n      challenge_name: this.state.challenge_name,\n      description: this.state.challenge_description,\n      end_time: \"20-02-28 14:20\",\n      step_goal: \"2000\",\n      reward: \"200\",\n      current_time: \"2020-02-30T08:35:30.0108Z\"\n    }; //x.elements[3].value,\n    // delivery_address: x.elements[4].value,\n    // delivery_coordinates: x.elements[5].value\n    // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n    // document.getElementById(\"status\").innerHTML = newOrder.order_status;\n\n    this.onSubmit(JSON.stringify(newOrder));\n  } // called when the client connects\n\n\n  onSubmit(payload) {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onSubmit\");\n    this.client.subscribe(\"doordie_web\");\n    var message = new Paho.Message(payload);\n    message.destinationName = \"doordie_web\";\n    this.client.send(message);\n  } // called to generate the IDs\n\n\n  makeid(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  } // called when the client loses its connection\n\n\n  onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"Mqtt.onConnectionLost:\" + responseObject.errorMessage);\n    }\n  } // called when a message arrives\n\n\n  onMessageArrived(message) {\n    console.log(\"Mgtt.onMessageArrived:\" + message.payloadString);\n  }\n\n}\n\nexport default Mqtt;","map":{"version":3,"sources":["C:/Users/chrib/Dropbox/Studium/5. Bristol/8.Software_Eng/Github/now-ui-kit-react-master/src/views/examples/MQTTclient.js"],"names":["React","jQuery","Paho","Mqtt","Component","constructor","props","state","challenge_name","challenge_description","undefined","handleChangeChallangeName","bind","pushNewChallenge","client","Client","makeid","connect","onSuccess","onConnect","onConnectionLost","onMessageArrived","render","type","renderSetChallenge","event","value","evt","target","setState","name","console","log","preventDefault","JSON","stringify","newOrder","challenge_id","description","end_time","step_goal","reward","current_time","onSubmit","payload","subscribe","message","Message","destinationName","send","length","result","characters","charactersLength","i","charAt","Math","floor","random","responseObject","errorCode","errorMessage","payloadString"],"mappings":"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","sourcesContent":["// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport React from \"react\";\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\n\nclass Mqtt extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        challenge_name: 'a',\n        challenge_description: undefined,\n    };\n    this.handleChangeChallangeName = this.handleChangeChallangeName.bind(this);\n    this.pushNewChallenge = this.pushNewChallenge.bind(this);\n\n    this.client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + this.makeid(3) );\n    this.client.connect({onSuccess: this.onConnect});\n    this.client.onConnectionLost = this.onConnectionLost;\n    this.client.onMessageArrived = this.onMessageArrived;\n  }\n\n  render(){\n      if(this.props.type === \"set-challenge\"){\n        return(this.renderSetChallenge());\n      }\n  }\n\n  renderSetChallenge(){\n    return(\n   <form align=\"middle\"\n   onSubmit={this.pushNewChallenge}>\n   <label>Event Name: <input type=\"text\" onChange={this.handleChangeChallangeName} value={this.state.challenge_name}/> </label><p/>\n   <label>Description: <input type=\"text\" onChange={this.handleChangeChallangeName} value={this.state.challenge_description}/> </label><p/>\n\n   <label>Start Date: <input type=\"date\" name=\"startdate\" /></label><p/>\n   <label>End Date: <input type=\"date\" name=\"enddate\" /></label><p/>\n   <label>Location: <input type=\"text\" name=\"location\" /></label><p/>\n   <label>User Bonus: <input type=\"number\" name=\"reward\" /></label><p/>\n   <label>Asset URL: <input type=\"url\" name=\"sponsorimgurl\" /></label><p/>\n\n    <button className=\"submit-button\"\n     >Place Order</button>\n   </form>\n  );\n  }\n\n  handleChangeChallangeName(event) {\n    const value = evt.target.value;\n    this.setState({\n      ...state,\n      [evt.target.name]: value\n    });\n  }\n\n  // called when the client connects\n  onConnect() {\n    // Once a connection has been made report.\n    console.log(\"Connected\");\n  }\n\n\n  pushNewChallenge(event){\n    event.preventDefault();\n    console.log(JSON.stringify(this.state.challenge_name));\n    // var x = Mqtt.getByValue(\"challenge-name\");\n    console.log(\"Pushing New Challenge\");\n  \tvar newOrder = {\n      type: \"push new challenge\",\n      challenge_id: \"C\" + this.makeid(6),\n      challenge_name: this.state.challenge_name,\n      description: this.state.challenge_description,\n      end_time: \"20-02-28 14:20\",\n      step_goal: \"2000\",\n      reward: \"200\",\n      current_time: \"2020-02-30T08:35:30.0108Z\"\n    }\n       //x.elements[3].value,\n    \t// delivery_address: x.elements[4].value,\n    \t// delivery_coordinates: x.elements[5].value\n    // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n  \t// document.getElementById(\"status\").innerHTML = newOrder.order_status;\n  \tthis.onSubmit(JSON.stringify(newOrder));\n  }\n\n  // called when the client connects\n  onSubmit(payload) {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onSubmit\");\n    this.client.subscribe(\"doordie_web\");\n    var message = new Paho.Message(payload);\n    message.destinationName = \"doordie_web\";\n    this.client.send(message);\n  }\n\n  // called to generate the IDs\n  makeid(length) {\n     var result           = '';\n     var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n     var charactersLength = characters.length;\n     for ( var i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n     }\n     return result;\n  }\n\n  // called when the client loses its connection\n  onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"Mqtt.onConnectionLost:\"+responseObject.errorMessage);\n    }\n  }\n\n  // called when a message arrives\n  onMessageArrived(message) {\n    console.log(\"Mgtt.onMessageArrived:\"+message.payloadString);\n  }\n\n}\nexport default Mqtt;\n"]},"metadata":{},"sourceType":"module"}