{"ast":null,"code":"// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\nconst Mqtt = {\n  // set callback handlers\n  // client.onConnectionLost = Mqtt.onConnectionLost\n  // client.onMessageArrived = Mqtt.onMessageArrived\n  // connect the client\n  init: function () {\n    var client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + Mqtt.makeid(3));\n    client.connect({\n      onSuccess: Mqtt.onConnect(client)\n    });\n    return client;\n  },\n  getByValue: function (variable) {\n    var x = document.getElementById(variable);\n    return x;\n  },\n  placeOrder: function () {\n    client = init();\n    console.log(\"Hello\");\n    var text = \"\";\n    var newOrder = {\n      order_id: \"O\" + Mqtt.makeid(7),\n      // order_status: getByValue(\"Name\"),\n      user: {\n        user_name: \"Oli\" //x.elements[3].value,\n        // delivery_address: x.elements[4].value,\n        // delivery_coordinates: x.elements[5].value\n\n      }\n    }; // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n    // document.getElementById(\"status\").innerHTML = newOrder.order_status;\n\n    Mqtt.onSubmit(JSON.stringify(newOrder), client);\n  },\n  // called when the client connects\n  onSubmit: function (payload, client) {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onSubmit\");\n    client.subscribe(\"food_orders\");\n    var message = new Paho.Message(payload);\n    message.destinationName = \"food_orders\";\n    client.send(message);\n  },\n  // called when the client connects\n  onConnect: function (client) {\n    // Once a connection has been made report.\n    console.log(\"Connected\");\n  },\n  // called when the client loses its connection\n  onConnectionLost: function (responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"Mqtt.onConnectionLost:\" + responseObject.errorMessage);\n    }\n  },\n  // called when a message arrives\n  onMessageArrived: function (message) {\n    console.log(\"Mgtt.onMessageArrived:\" + message.payloadString);\n  },\n  // called to generate the IDs\n  makeid: function (length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  }\n};\nexport default Mqtt;","map":{"version":3,"sources":["C:/Users/chrib/Dropbox/Studium/5. Bristol/8.Software_Eng/Github/now-ui-kit-react-master/src/views/examples/MQTTclient.js"],"names":["jQuery","Paho","Mqtt","init","client","Client","makeid","connect","onSuccess","onConnect","getByValue","variable","x","document","getElementById","placeOrder","console","log","text","newOrder","order_id","user","user_name","onSubmit","JSON","stringify","payload","subscribe","message","Message","destinationName","send","onConnectionLost","responseObject","errorCode","errorMessage","onMessageArrived","payloadString","length","result","characters","charactersLength","i","charAt","Math","floor","random"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,MAAMC,IAAI,GAAE;AAGZ;AACA;AACA;AAEA;AAGAC,EAAAA,IAAI,EAAC,YAAU;AACb,QAAIC,MAAM,GAAG,IAAIH,IAAI,CAACI,MAAT,CAAgB,0BAAhB,EAA4C,IAA5C,EAAkD,aAAaH,IAAI,CAACI,MAAL,CAAY,CAAZ,CAA/D,CAAb;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAe;AAACC,MAAAA,SAAS,EAACN,IAAI,CAACO,SAAL,CAAeL,MAAf;AAAX,KAAf;AACA,WAAOA,MAAP;AACD,GAdW;AAgBZM,EAAAA,UAAU,EAAE,UAASC,QAAT,EAAkB;AAC5B,QAAIC,CAAC,GAAGC,QAAQ,CAACC,cAAT,CAAwBH,QAAxB,CAAR;AACA,WAAOC,CAAP;AACD,GAnBW;AAqBZG,EAAAA,UAAU,EAAE,YAAU;AACpBX,IAAAA,MAAM,GAAGD,IAAI,EAAb;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,QAAIC,IAAI,GAAG,EAAX;AACD,QAAIC,QAAQ,GAAG;AACdC,MAAAA,QAAQ,EAAE,MAAMlB,IAAI,CAACI,MAAL,CAAY,CAAZ,CADF;AAEd;AACEe,MAAAA,IAAI,EAAE;AACJC,QAAAA,SAAS,EAAE,KADP,CAEL;AACF;AACA;;AAJO;AAHM,KAAf,CAJqB,CAcpB;AACD;;AACApB,IAAAA,IAAI,CAACqB,QAAL,CAAcC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAAd,EAAuCf,MAAvC;AACA,GAtCW;AAwCZ;AACAmB,EAAAA,QAAQ,EAAE,UAASG,OAAT,EAAkBtB,MAAlB,EAA0B;AAClC;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAb,IAAAA,MAAM,CAACuB,SAAP,CAAiB,aAAjB;AACA,QAAIC,OAAO,GAAG,IAAI3B,IAAI,CAAC4B,OAAT,CAAiBH,OAAjB,CAAd;AACAE,IAAAA,OAAO,CAACE,eAAR,GAA0B,aAA1B;AACA1B,IAAAA,MAAM,CAAC2B,IAAP,CAAYH,OAAZ;AACD,GAhDW;AAmDZ;AACAnB,EAAAA,SAAS,EAAE,UAASL,MAAT,EAAiB;AAC1B;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,GAvDW;AAyDZ;AACAe,EAAAA,gBAAgB,EAAE,UAASC,cAAT,EAAyB;AACzC,QAAIA,cAAc,CAACC,SAAf,KAA6B,CAAjC,EAAoC;AAClClB,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAyBgB,cAAc,CAACE,YAApD;AACD;AACF,GA9DW;AAgEZ;AACAC,EAAAA,gBAAgB,EAAE,UAASR,OAAT,EAAkB;AAClCZ,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAyBW,OAAO,CAACS,aAA7C;AACD,GAnEW;AAqEZ;AACA/B,EAAAA,MAAM,EAAE,UAASgC,MAAT,EAAiB;AACtB,QAAIC,MAAM,GAAa,EAAvB;AACA,QAAIC,UAAU,GAAS,gEAAvB;AACA,QAAIC,gBAAgB,GAAGD,UAAU,CAACF,MAAlC;;AACA,SAAM,IAAII,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGJ,MAArB,EAA6BI,CAAC,EAA9B,EAAmC;AAChCH,MAAAA,MAAM,IAAIC,UAAU,CAACG,MAAX,CAAkBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,gBAA3B,CAAlB,CAAV;AACF;;AACD,WAAOF,MAAP;AACF;AA9EW,CAAZ;AAiFA,eAAerC,IAAf","sourcesContent":["// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\n\nconst Mqtt ={\n\n\n// set callback handlers\n// client.onConnectionLost = Mqtt.onConnectionLost\n// client.onMessageArrived = Mqtt.onMessageArrived\n\n// connect the client\n\n\ninit:function(){\n  var client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + Mqtt.makeid(3) )\n  client.connect({onSuccess:Mqtt.onConnect(client)})\n  return client\n},\n\ngetByValue: function(variable){\n  var x = document.getElementById(variable)\n  return x\n},\n\nplaceOrder: function(){\n  client = init()\n  console.log(\"Hello\");\n  var text = \"\";\n\tvar newOrder = {\n  order_id: \"O\" + Mqtt.makeid(7),\n  // order_status: getByValue(\"Name\"),\n    user: {\n\t\t    user_name: \"Oli\"\n     //x.elements[3].value,\n  \t// delivery_address: x.elements[4].value,\n  \t// delivery_coordinates: x.elements[5].value\n\t },\n  }\n  // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n\t// document.getElementById(\"status\").innerHTML = newOrder.order_status;\n\tMqtt.onSubmit(JSON.stringify(newOrder),client);\n},\n\n// called when the client connects\nonSubmit: function(payload, client) {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onSubmit\");\n  client.subscribe(\"food_orders\");\n  var message = new Paho.Message(payload);\n  message.destinationName = \"food_orders\";\n  client.send(message);\n},\n\n\n// called when the client connects\nonConnect: function(client) {\n  // Once a connection has been made report.\n  console.log(\"Connected\");\n},\n\n// called when the client loses its connection\nonConnectionLost: function(responseObject) {\n  if (responseObject.errorCode !== 0) {\n    console.log(\"Mqtt.onConnectionLost:\"+responseObject.errorMessage);\n  }\n},\n\n// called when a message arrives\nonMessageArrived: function(message) {\n  console.log(\"Mgtt.onMessageArrived:\"+message.payloadString);\n},\n\n// called to generate the IDs\nmakeid: function(length) {\n   var result           = '';\n   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n   var charactersLength = characters.length;\n   for ( var i = 0; i < length; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n   }\n   return result;\n}\n\n}\nexport default Mqtt;\n"]},"metadata":{},"sourceType":"module"}