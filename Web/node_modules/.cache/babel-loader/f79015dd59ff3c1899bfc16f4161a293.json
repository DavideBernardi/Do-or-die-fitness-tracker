{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chrib\\\\Dropbox\\\\Studium\\\\5. Bristol\\\\8.Software_Eng\\\\Github\\\\now-ui-kit-react-master\\\\src\\\\views\\\\examples\\\\MQTTclient.js\";\n// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport React from \"react\";\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\nimport DisplayData from './DisplayData';\n\nclass Mqtt extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      challenge_name: 'a',\n      challenge_description: undefined\n    };\n    this.handleChangeChallangeName = this.handleChangeChallangeName.bind(this);\n    this.pushNewChallenge = this.pushNewChallenge.bind(this);\n    this.client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + this.makeid(3));\n    this.client.connect({\n      onSuccess: this.onConnect\n    });\n    this.client.onConnectionLost = this.onConnectionLost;\n    this.client.onMessageArrived = this.onMessageArrived;\n  }\n\n  render() {\n    if (this.props.type === \"set-challenge\") {\n      return this.renderSetChallenge();\n    }\n  }\n\n  renderSetChallenge() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      formData: this.state,\n      handleChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(DisplayData, {\n      formData: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }));\n  }\n\n  handleChangeChallangeName(event) {\n    const value = event.target.value;\n    this.setState({\n      [event.target.name]: value\n    });\n  } // called when the client connects\n\n\n  onConnect() {\n    // Once a connection has been made report.\n    console.log(\"Connected\");\n  }\n\n  pushNewChallenge(event) {\n    event.preventDefault();\n    console.log(JSON.stringify(this.state.challenge_name)); // var x = Mqtt.getByValue(\"challenge-name\");\n\n    console.log(\"Pushing New Challenge\");\n    var newOrder = {\n      type: \"push new challenge\",\n      challenge_id: \"C\" + this.makeid(6),\n      challenge_name: this.state.challenge_name,\n      description: event.target.children[1].value,\n      end_time: \"20-02-28 14:20\",\n      step_goal: \"2000\",\n      reward: \"200\",\n      current_time: \"2020-02-30T08:35:30.0108Z\"\n    }; //x.elements[3].value,\n    // delivery_address: x.elements[4].value,\n    // delivery_coordinates: x.elements[5].value\n    // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n    // document.getElementById(\"status\").innerHTML = newOrder.order_status;\n\n    this.onSubmit(JSON.stringify(newOrder));\n  } // called when the client connects\n\n\n  onSubmit(payload) {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onSubmit\");\n    this.client.subscribe(\"doordie_web\");\n    var message = new Paho.Message(payload);\n    message.destinationName = \"doordie_web\";\n    this.client.send(message);\n  } // called to generate the IDs\n\n\n  makeid(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  } // called when the client loses its connection\n\n\n  onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"Mqtt.onConnectionLost:\" + responseObject.errorMessage);\n    }\n  } // called when a message arrives\n\n\n  onMessageArrived(message) {\n    console.log(\"Mgtt.onMessageArrived:\" + message.payloadString);\n  }\n\n}\n\nexport default Mqtt;","map":{"version":3,"sources":["C:/Users/chrib/Dropbox/Studium/5. Bristol/8.Software_Eng/Github/now-ui-kit-react-master/src/views/examples/MQTTclient.js"],"names":["React","jQuery","Paho","DisplayData","Mqtt","Component","constructor","props","state","challenge_name","challenge_description","undefined","handleChangeChallangeName","bind","pushNewChallenge","client","Client","makeid","connect","onSuccess","onConnect","onConnectionLost","onMessageArrived","render","type","renderSetChallenge","handleChange","event","value","target","setState","name","console","log","preventDefault","JSON","stringify","newOrder","challenge_id","description","children","end_time","step_goal","reward","current_time","onSubmit","payload","subscribe","message","Message","destinationName","send","length","result","characters","charactersLength","i","charAt","Math","floor","random","responseObject","errorCode","errorMessage","payloadString"],"mappings":"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","sourcesContent":["// Create a client instance, we create a random id so the broker will allow multiple sessions\nimport React from \"react\";\nimport jQuery from 'jquery';\nimport Paho from 'paho-mqtt';\nimport DisplayData from './DisplayData'\n\nclass Mqtt extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        challenge_name: 'a',\n        challenge_description: undefined,\n    };\n    this.handleChangeChallangeName = this.handleChangeChallangeName.bind(this);\n    this.pushNewChallenge = this.pushNewChallenge.bind(this);\n\n    this.client = new Paho.Client(\"broker.mqttdashboard.com\", 8000, \"clientId\" + this.makeid(3) );\n    this.client.connect({onSuccess: this.onConnect});\n    this.client.onConnectionLost = this.onConnectionLost;\n    this.client.onMessageArrived = this.onMessageArrived;\n  }\n\n  render(){\n      if(this.props.type === \"set-challenge\"){\n        return(this.renderSetChallenge());\n      }\n  }\n\n  renderSetChallenge(){\n    return(\n      <div>\n  <form\n    formData={this.state}\n    handleChange={this.handleChange}\n  />\n  <DisplayData formData={this.state} />\n</div>\n\n\n  );\n  }\n\n  handleChangeChallangeName(event) {\n    const value = event.target.value;\n    this.setState({\n\n      [event.target.name]: value\n    });\n  }\n\n  // called when the client connects\n  onConnect() {\n    // Once a connection has been made report.\n    console.log(\"Connected\");\n  }\n\n\n  pushNewChallenge(event){\n    event.preventDefault();\n    console.log(JSON.stringify(this.state.challenge_name));\n    // var x = Mqtt.getByValue(\"challenge-name\");\n    console.log(\"Pushing New Challenge\");\n  \tvar newOrder = {\n      type: \"push new challenge\",\n      challenge_id: \"C\" + this.makeid(6),\n      challenge_name: this.state.challenge_name,\n      description: event.target.children[1].value,\n      end_time: \"20-02-28 14:20\",\n      step_goal: \"2000\",\n      reward: \"200\",\n      current_time: \"2020-02-30T08:35:30.0108Z\"\n    }\n       //x.elements[3].value,\n    \t// delivery_address: x.elements[4].value,\n    \t// delivery_coordinates: x.elements[5].value\n    // document.getElementById(\"order\").innerHTML = JSON.stringify(newOrder);\n  \t// document.getElementById(\"status\").innerHTML = newOrder.order_status;\n  \tthis.onSubmit(JSON.stringify(newOrder));\n  }\n\n  // called when the client connects\n  onSubmit(payload) {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onSubmit\");\n    this.client.subscribe(\"doordie_web\");\n    var message = new Paho.Message(payload);\n    message.destinationName = \"doordie_web\";\n    this.client.send(message);\n  }\n\n  // called to generate the IDs\n  makeid(length) {\n     var result           = '';\n     var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n     var charactersLength = characters.length;\n     for ( var i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n     }\n     return result;\n  }\n\n  // called when the client loses its connection\n  onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"Mqtt.onConnectionLost:\"+responseObject.errorMessage);\n    }\n  }\n\n  // called when a message arrives\n  onMessageArrived(message) {\n    console.log(\"Mgtt.onMessageArrived:\"+message.payloadString);\n  }\n\n}\nexport default Mqtt;\n"]},"metadata":{},"sourceType":"module"}